{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["colorList","App","handleReset","setinputValue","setRandomNumber","Math","floor","random","settemp","setprogressBar","useState","randomNumber","inputValue","progressBar","progressColor","setprogressColor","temp","className","onSubmit","e","preventDefault","pV","abs","round","placeholder","type","min","max","required","value","onChange","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAEMA,EAAY,CAChB,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAyFaC,MAtFf,WACE,IAAMC,EAAc,WAClBC,EAAc,IACdC,EAAgBC,KAAKC,MAAsB,IAAhBD,KAAKE,WAChCC,EAAQ,QACRC,EAAe,IALJ,EAkB2BC,mBACtCL,KAAKC,MAAsB,IAAhBD,KAAKE,WAnBL,mBAkBNI,EAlBM,KAkBQP,EAlBR,OAqBuBM,mBAAS,IArBhC,mBAqBNE,EArBM,KAqBMT,EArBN,OAsByBO,mBAAS,GAtBlC,mBAsBNG,EAtBM,KAsBOJ,EAtBP,OAuB6BC,mBAAS,IAvBtC,mBAuBNI,EAvBM,KAuBSC,EAvBT,OAwBWL,mBAAS,QAxBpB,mBAwBNM,EAxBM,KAwBAR,EAxBA,KAyBb,OACE,sBAAKS,UAAU,uEAAf,UACE,uBACEC,SArBe,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAK,IAAMhB,KAAKiB,IAAIV,EAAaD,GACvBH,EAAL,MAAPa,EAAoB,UACfA,EAAKR,EAAqB,SAC1BA,EAAc,IAAMA,EAAcQ,EAAY,SAC1C,UACbN,EAAiBf,EAAUK,KAAKkB,MAAMF,EAAK,GAAK,IAChDZ,EAAeY,GACflB,EAAc,KAaVc,UAAU,6CAFZ,UAIE,kCACE,4DACA,uBACEO,YAAY,gBACZC,KAAK,SACLC,IAAI,IACJC,IAAI,MACJC,UAAQ,EACRC,MAAOjB,EACPkB,SAAU,SAACX,GAAD,OAAOhB,EAAcgB,EAAEY,OAAOF,QACxCZ,UAAU,qGAGd,sBAAKA,UAAU,yCAAf,UACE,wBACEA,UAAU,kIACVQ,KAAK,SAFP,mBAMA,wBACER,UAAU,kIACVQ,KAAK,SACLO,QAAS9B,EAHX,2BASJ,kCACE,4BAAIc,IACJ,0BACEC,UAAS,wCAAmCH,GAC5Ce,MAAOhB,EACPc,IAAI,WAGE,YAATX,GACC,qBAAKC,UAAU,qFAAf,SACE,gCACE,+CACA,qDAAwBN,KACxB,wBACEM,UAAU,kIACVe,QAAS9B,EAFX,8BCtFG+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84bfcbf5.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst colorList = [\n  \"blue-900\",\n  \"blue-800\",\n  \"blue-700\",\n  \"blue-600\",\n  \"blue-500\",\n  \"blue-400\",\n  \"blue-300\",\n  \"blue-200\",\n  \"blue-100\",\n  \"blue-50\",\n  \"red-50\",\n  \"red-100\",\n  \"red-200\",\n  \"red-300\",\n  \"red-400\",\n  \"red-500\",\n  \"red-600\",\n  \"red-700\",\n  \"red-800\",\n  \"red-900\",\n];\n\nfunction App() {\n  const handleReset = () => {\n    setinputValue(\"\");\n    setRandomNumber(Math.floor(Math.random() * 101));\n    settemp(\"cold\");\n    setprogressBar(0);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const pV = 100 - Math.abs(inputValue - randomNumber);\n    if (pV === 100) settemp(\"correct\");\n    else if (pV < progressBar) settemp(\"colder\");\n    else if (progressBar < 50 && progressBar < pV) settemp(\"warmer\");\n    else settemp(\"hotter\");\n    setprogressColor(colorList[Math.round(pV / 5) - 1]);\n    setprogressBar(pV);\n    setinputValue(\"\");\n  };\n  const [randomNumber, setRandomNumber] = useState(\n    Math.floor(Math.random() * 101)\n  );\n  const [inputValue, setinputValue] = useState(\"\");\n  const [progressBar, setprogressBar] = useState(0);\n  const [progressColor, setprogressColor] = useState(\"\");\n  const [temp, settemp] = useState(\"cold\");\n  return (\n    <div className=\"container mx-auto items-center flex-col justify-around h-screen flex\">\n      <form\n        onSubmit={handleSubmit}\n        className=\"border-purple-600 border-2 rounded-3xl p-4\"\n      >\n        <label>\n          <p>Type a number from 0 to 100</p>\n          <input\n            placeholder=\"Type a number\"\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            required\n            value={inputValue}\n            onChange={(e) => setinputValue(e.target.value)}\n            className=\"block w-full outline-none border-transparent rounded-2xl p-2 focus:border-purple-600 border-2\"\n          />\n        </label>\n        <div className=\"flex items-center pt-4 justify-between\">\n          <button\n            className=\"border-2 hover:border-transparent hover:bg-purple-600 hover:text-white py-1 px-4 rounded-full border-purple-600 text-purple-600\"\n            type=\"submit\"\n          >\n            Check\n          </button>\n          <button\n            className=\"border-2 hover:border-transparent hover:bg-indigo-900 hover:text-white py-1 px-4 rounded-full border-indigo-900 text-indigo-900\"\n            type=\"button\"\n            onClick={handleReset}\n          >\n            Restart\n          </button>\n        </div>\n      </form>\n      <label>\n        <p>{temp}</p>\n        <progress\n          className={`bg-white rounded-2xl border-2 ${progressColor}`}\n          value={progressBar}\n          max=\"100\"\n        ></progress>\n      </label>\n      {temp === \"correct\" && (\n        <div className=\"bg-gray-50 px-11 fixed h-screen text-center flex justify-center items-center top-0\">\n          <div>\n            <h3>You Found it!</h3>\n            <p>The right number is {randomNumber}</p>\n            <button\n              className=\"border-2 hover:border-transparent hover:bg-indigo-900 hover:text-white py-1 px-4 rounded-full border-indigo-900 text-indigo-900\"\n              onClick={handleReset}\n            >\n              Restart\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}